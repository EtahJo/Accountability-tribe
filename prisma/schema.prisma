// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
enum UserRole{
ADMIN
USER
}
enum Status{
  COMPLETE
  STARTED 
  PROGRESS
  NOTSTARTED
}
enum Priority{
  HIGH
  LOW
  FIRST
}
enum NotificationType{
  WARNING
  APPROVAL
  ADMINTASK
  SESSIONUPDATES
  SESSIONSTART
  DEADLINES
  LIKE
  COMMENT
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  username      String?         @unique
  name         String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  remember      Boolean?
  number       String?
  linkedIn     String?
  X            String?
  facebook     String?
  country      String?
  hightlighted  Boolean @default(false)
  streak        Streak?
 tribes         TribeUser[]  
sessions      SessionParticipant[]
timezone      String?

  image         String?
  comments     Comment[]
  posts        Post[]
    likes   Like[]
    tribeVisits TribeVisit[]
    tasks   Task[]
    accounts      Account[]
 notifications Notification[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @unique @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Streak {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  count       Int      @default(0)
  lastUpdated DateTime @default(now())
  longestStreak Int    @default(0)
  activeDays  Int     @default(0)
  user        User     @relation(fields: [userId], references: [id])

  @@map("streaks")
}
 model Task{
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  status     Status
  priority  Int
  dueDate   DateTime
  dateCompleted DateTime?
  userId      String  @db.ObjectId
  user User  @relation(fields: [userId],references: [id])
  sessionParticipants    SessionTask[]
   createdAt   DateTime  @default(now())
  updatedAt DateTime @updatedAt
 }

 model SessionTask{
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionParticipantId String   @db.ObjectId
  taskId    String   @db.ObjectId

  sessionParticipant   SessionParticipant  @relation(fields: [sessionParticipantId], references: [id],onDelete:Cascade)
  task      Task     @relation(fields: [taskId], references: [id])

  @@unique([sessionParticipantId, taskId])
 }


model Tribe{
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  profileImage   String?
  adminsUserIds String[]
  tags           String[]
  posts         Post[]
  users        TribeUser[] 
  recommended  Boolean @default(false)
  tribeVisit  TribeVisit[]

}
model TribeUser{
    id           String      @id @default(auto()) @map("_id") @db.ObjectId
    userId      String @db.ObjectId
    tribeId     String @db.ObjectId
    userRole   UserRole
    adminsUserIds  String[]
    tribe    Tribe @relation(fields: [tribeId],references: [id])
    user     User @relation(fields: [userId],references: [id],onDelete:Cascade)
     @@unique([userId, tribeId])
}

model SessionParticipant{
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  sessionId String @db.ObjectId
  userId    String @db.ObjectId
  userRole  UserRole
  goal      String?
  tasks     SessionTask[]
  adminUserId  String?
  user      User @relation(fields: [userId],references: [id],onDelete:Cascade)
  session Session @relation(fields: [sessionId],references: [id], onDelete:Cascade)
  @@unique([userId,sessionId])
}

model Session{
   id     String @id @default(auto()) @map("_id") @db.ObjectId
   goal   String
   startDateTime DateTime
   endDateTime   DateTime?
   adminUserId String?
   meetingLink   String
   duration    String?
   participants Int? @default(0)
   users SessionParticipant[]
}
model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  post   Post?   @relation(fields: [postId], references: [id])
  postId String? @db.ObjectId
  comment   Comment ?  @relation(fields: [commentId], references: [id])
  commentId String? @db.ObjectId
  createdAt DateTime  @default(now())

}
model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String?
  content   String
  approved  Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  tribe     Tribe    @relation(fields: [tribeId], references: [id])
  tribeId   String   @db.ObjectId
  comments  Comment[]
  likes    Like[]
  edited Boolean @default(false)
   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pendindEdits  PostEdit[]
}
model PostEdit{
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post    @relation(fields: [postId], references: [id])
  postId    String @db.ObjectId
  title     String
  content   String
  createdAt DateTime @default(now())
  approved  Boolean  @default(false)
}

model Comment {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  content String
  author  User     @relation(fields: [authorId], references: [id])
  authorId String  @db.ObjectId
  post    Post     @relation(fields: [postId], references: [id])
  postId  String   @db.ObjectId
  edited Boolean @default(false)
   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   parent      Comment?    @relation("CommentReplies", fields: [parentId], references: [id],onDelete:NoAction,onUpdate:NoAction)
  parentId    String?     @db.ObjectId
  replies     Comment[]   @relation("CommentReplies")
  likes      Like[]
}

model TribeVisit {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  user     User     @relation(fields: [userId], references: [id],onDelete:Cascade)
  userId   String  @db.ObjectId
  tribe    Tribe    @relation(fields: [tribeId], references: [id],onDelete:Cascade)
  tribeId  String   @db.ObjectId
  lastVisit DateTime @default(now())

  @@unique([userId,tribeId])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  message   String
  type      NotificationType
  locationId String?
  pageId     String?
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
}